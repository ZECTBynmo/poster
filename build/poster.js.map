{"version":3,"file":"poster.js","names":[],"mappings":"","sources":["poster.js"],"sourcesContent":["// Copyright (c) Jonathan Frederic, see the LICENSE file for more info.\nvar scrolling_canvas = require('./scrolling_canvas.js');\nvar canvas = require('./canvas.js');\nvar document_controller = require('./document_controller.js');\nvar document_model = require('./document_model.js');\nvar document_view = require('./document_view.js');\nvar pluginmanager = require('./plugins/manager.js');\nvar plugin = require('./plugins/plugin.js');\nvar renderer = require('./renderers/renderer.js');\nvar style = require('./style.js');\nvar utils = require('./utils.js');\nvar config = require('./config.js');\nconfig = config.config;\n\n/**\n * Canvas based text editor\n */\nclass Poster extends utils.PosterClass {\n    constructor() {\n        super.constructor();\n\n        // Create canvas\n        this.canvas = new scrolling_canvas.ScrollingCanvas();\n        this.el = this.canvas.el; // Convenience\n        this._style = new style.Style();\n\n        // Create model, controller, and view.\n        this.model = new document_model.DocumentModel();\n        this.controller = new document_controller.DocumentController(this.canvas.el, this.model);\n        this.view = new document_view.DocumentView(\n            this.canvas, \n            this.model, \n            this.controller.cursors, \n            this._style,\n            () => { \n                return this.controller.clipboard.hidden_input === document.activeElement \n                    || this.canvas.focused; \n            }\n        );\n\n        // Load plugins.\n        this.plugins = new pluginmanager.PluginManager(this);\n        this.plugins.load('gutter');\n        this.plugins.load('linenumbers');\n    }\n\n    get style() {\n        return this._style;\n    }\n\n    get config() {\n        return config;\n    }\n\n    get value() {\n        return this.model.text;\n    }\n    set value(value) {\n        this.model.text = value;\n    }\n\n    get width() {\n        return this.view.width;\n    }\n    set width(value) {\n        this.view.width = value;\n        this.trigger('resized');\n    }\n\n    get height() {\n        return this.view.height;\n    }\n    set height(value) {\n        this.view.height = value;\n        this.trigger('resized');\n    }\n\n    get language() {\n        return this.view.language;\n    }\n    set language(value) {\n        this.view.language = value;\n    }\n}\n\n// Exports\nwindow.poster = {\n    Poster: Poster,\n    Canvas: plugin.PluginBase,\n    PluginBase: plugin.PluginBase,\n    RendererBase: renderer.RendererBase,\n    utils: utils\n};\n"],"sourceRoot":"/source/"}